/*
 * Ex Libris APIs
 * For more information on how to use these APIs, including how to create an API key required for authentication, see [Alma REST APIs](https://developers.exlibrisgroup.com/alma/apis).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.unidue.ub.alma.shared.acq;

import java.util.Objects;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.dataformat.xml.annotation.*;
import javax.xml.bind.annotation.*;

/**
 * Specific vendor&#39;s phone number.
 */
@ApiModel(description = "Specific vendor's phone number.")
@JsonPropertyOrder({
  Phone.JSON_PROPERTY_PREFERRED,
  Phone.JSON_PROPERTY_PREFERRED_SMS,
  Phone.JSON_PROPERTY_PHONE_NUMBER,
  Phone.JSON_PROPERTY_PHONE_TYPE
})

@XmlRootElement(name = "phone")
@XmlAccessorType(XmlAccessType.FIELD)
@JacksonXmlRootElement(localName = "phone")
public class Phone implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_PREFERRED = "preferred";
  @XmlAttribute(name = "preferred")
  private Boolean preferred;

  public static final String JSON_PROPERTY_PREFERRED_SMS = "preferred_sms";
  @XmlAttribute(name = "preferred_sms")
  private Boolean preferredSms;

  public static final String JSON_PROPERTY_PHONE_NUMBER = "phone_number";
  @XmlElement(name = "phone_number")
  private String phoneNumber;

  public static final String JSON_PROPERTY_PHONE_TYPE = "phone_type";
  // Is a container wrapped=true
  // items.name=phoneType items.baseName=phoneType items.xmlName= items.xmlNamespace=
  // items.example= items.type=Phone2PhoneType
  @XmlElement(name = "phoneType")
  @XmlElementWrapper(name = "phone_types")
  private List<PhonePhoneType> phoneType = null;


  public Phone preferred(Boolean preferred) {
    
    this.preferred = preferred;
    return this;
  }

   /**
   * Indication whether the phone number is the preferred one. Only one address can be defined as preferred.
   * @return preferred
  **/

  @ApiModelProperty(example = "false", value = "Indication whether the phone number is the preferred one. Only one address can be defined as preferred.")
  @JsonProperty(JSON_PROPERTY_PREFERRED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  @JacksonXmlProperty(isAttribute = true, localName = "preferred")

  public Boolean getPreferred() {
    return preferred;
  }


  public void setPreferred(Boolean preferred) {
    this.preferred = preferred;
  }


  public Phone preferredSms(Boolean preferredSms) {
    
    this.preferredSms = preferredSms;
    return this;
  }

   /**
   * Indication whether the phone number is the preferred one for SMS sending. Only one phone number can be defined as preferred.
   * @return preferredSms
  **/

  @ApiModelProperty(example = "false", value = "Indication whether the phone number is the preferred one for SMS sending. Only one phone number can be defined as preferred.")
  @JsonProperty(JSON_PROPERTY_PREFERRED_SMS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  @JacksonXmlProperty(isAttribute = true, localName = "preferred_sms")

  public Boolean getPreferredSms() {
    return preferredSms;
  }


  public void setPreferredSms(Boolean preferredSms) {
    this.preferredSms = preferredSms;
  }


  public Phone phoneNumber(String phoneNumber) {
    
    this.phoneNumber = phoneNumber;
    return this;
  }

   /**
   * The phone number. Mandatory.
   * @return phoneNumber
  **/

  @ApiModelProperty(value = "The phone number. Mandatory.")
  @JsonProperty(JSON_PROPERTY_PHONE_NUMBER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  @JacksonXmlProperty(localName = "phone_number")

  public String getPhoneNumber() {
    return phoneNumber;
  }


  public void setPhoneNumber(String phoneNumber) {
    this.phoneNumber = phoneNumber;
  }


  public Phone phoneType(List<PhonePhoneType> phoneType) {
    
    this.phoneType = phoneType;
    return this;
  }

  public Phone addPhoneTypeItem(PhonePhoneType phoneTypeItem) {
    if (this.phoneType == null) {
      this.phoneType = new ArrayList<PhonePhoneType>();
    }
    this.phoneType.add(phoneTypeItem);
    return this;
  }

   /**
   * The different Phone types. Mandatory.
   * @return phoneType
  **/

  @ApiModelProperty(value = "The different Phone types. Mandatory.")
  @JsonProperty(JSON_PROPERTY_PHONE_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  // items.xmlName=
  @JacksonXmlElementWrapper(useWrapping = true, localName = "phoneType")

  public List<PhonePhoneType> getPhoneType() {
    return phoneType;
  }


  public void setPhoneType(List<PhonePhoneType> phoneType) {
    this.phoneType = phoneType;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Phone phone = (Phone) o;
    return Objects.equals(this.preferred, phone.preferred) &&
        Objects.equals(this.preferredSms, phone.preferredSms) &&
        Objects.equals(this.phoneNumber, phone.phoneNumber) &&
        Objects.equals(this.phoneType, phone.phoneType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(preferred, preferredSms, phoneNumber, phoneType);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Phone2 {\n");
    sb.append("    preferred: ").append(toIndentedString(preferred)).append("\n");
    sb.append("    preferredSms: ").append(toIndentedString(preferredSms)).append("\n");
    sb.append("    phoneNumber: ").append(toIndentedString(phoneNumber)).append("\n");
    sb.append("    phoneType: ").append(toIndentedString(phoneType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

