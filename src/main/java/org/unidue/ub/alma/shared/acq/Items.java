/*
 * Ex Libris APIs
 * For more information on how to use these APIs, including how to create an API key required for authentication, see [Alma REST APIs](https://developers.exlibrisgroup.com/alma/apis).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.unidue.ub.alma.shared.acq;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.dataformat.xml.annotation.*;
import javax.xml.bind.annotation.*;

/**
 * A collection of Physical Items.
 */
@ApiModel(description = "A collection of Physical Items.")
@JsonPropertyOrder({
  Items.JSON_PROPERTY_TOTAL_RECORD_COUNT,
  Items.JSON_PROPERTY_ITEM
})

@XmlRootElement(name = "items")
@XmlAccessorType(XmlAccessType.FIELD)
@JacksonXmlRootElement(localName = "items")
public class Items implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_TOTAL_RECORD_COUNT = "total_record_count";
  @XmlAttribute(name = "total_record_count")
  private Integer totalRecordCount;

  public static final String JSON_PROPERTY_ITEM = "item";
  // Is a container wrapped=false
  // items.name=item items.baseName=item items.xmlName= items.xmlNamespace=
  // items.example= items.type=Object
  @XmlElement(name = "item")
  private List<Item> item = null;


  public Items totalRecordCount(Integer totalRecordCount) {
    
    this.totalRecordCount = totalRecordCount;
    return this;
  }

   /**
   * The total number of items. This can be used when retrieving the list using pagination.
   * @return totalRecordCount
  **/
  
  @ApiModelProperty(value = "The total number of items. This can be used when retrieving the list using pagination.")
  @JsonProperty(JSON_PROPERTY_TOTAL_RECORD_COUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  @JacksonXmlProperty(isAttribute = true, localName = "total_record_count")

  public Integer getTotalRecordCount() {
    return totalRecordCount;
  }


  public void setTotalRecordCount(Integer totalRecordCount) {
    this.totalRecordCount = totalRecordCount;
  }


  public Items item(List<Item> item) {
    
    this.item = item;
    return this;
  }

  public Items addItemItem(Item itemItem) {
    if (this.item == null) {
      this.item = new ArrayList<Item>();
    }
    this.item.add(itemItem);
    return this;
  }

   /**
   * A Physical item.
   * @return item
  **/
  
  @ApiModelProperty(value = "A Physical item.")
  @JsonProperty(JSON_PROPERTY_ITEM)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<Item> getItem() {
    return item;
  }


  public void setItem(List<Item> item) {
    this.item = item;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Items items = (Items) o;
    return Objects.equals(this.totalRecordCount, items.totalRecordCount) &&
        Objects.equals(this.item, items.item);
  }

  @Override
  public int hashCode() {
    return Objects.hash(totalRecordCount, item);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Items {\n");
    sb.append("    totalRecordCount: ").append(toIndentedString(totalRecordCount)).append("\n");
    sb.append("    item: ").append(toIndentedString(item)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

