/*
 * Ex Libris APIs
 * For more information on how to use these APIs, including how to create an API key required for authentication, see [Alma REST APIs](https://developers.exlibrisgroup.com/alma/apis).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.unidue.ub.alma.shared.user;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlProperty;
import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlRootElement;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

import javax.xml.bind.annotation.*;
import java.io.Serializable;
import java.time.OffsetDateTime;
import java.util.Objects;

/**
 * Specific user&#39;s note.
 */
@ApiModel(description = "Specific user's note.")
@JsonPropertyOrder({
  UserNote.JSON_PROPERTY_SEGMENT_TYPE,
  UserNote.JSON_PROPERTY_NOTE_TYPE,
  UserNote.JSON_PROPERTY_NOTE_TEXT,
  UserNote.JSON_PROPERTY_USER_VIEWABLE,
  UserNote.JSON_PROPERTY_POPUP_NOTE,
  UserNote.JSON_PROPERTY_CREATED_BY,
  UserNote.JSON_PROPERTY_CREATED_DATE
})

@XmlRootElement(name = "user_note")
@XmlAccessorType(XmlAccessType.FIELD)
@JacksonXmlRootElement(localName = "user_note")
public class UserNote implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_SEGMENT_TYPE = "segment_type";
  @XmlAttribute(name = "segment_type")
  private String segmentType;

  public static final String JSON_PROPERTY_NOTE_TYPE = "note_type";
  @XmlElement(name = "note_type")
  private UserNoteNoteType noteType;

  public static final String JSON_PROPERTY_NOTE_TEXT = "note_text";
  @XmlElement(name = "note_text")
  private String noteText;

  public static final String JSON_PROPERTY_USER_VIEWABLE = "user_viewable";
  @XmlElement(name = "user_viewable")
  private Boolean userViewable;

  public static final String JSON_PROPERTY_POPUP_NOTE = "popup_note";
  @XmlElement(name = "popup_note")
  private Boolean popupNote;

  public static final String JSON_PROPERTY_CREATED_BY = "created_by";
  @XmlElement(name = "created_by")
  private String createdBy;

  public static final String JSON_PROPERTY_CREATED_DATE = "created_date";
  @XmlElement(name = "created_date")
  private OffsetDateTime createdDate;


  public UserNote segmentType(String segmentType) {

    this.segmentType = segmentType;
    return this;
  }

   /**
   * The type of the segment (Internal or External). Relevant only for User API (and not for SIS). For internal users, all the segments are considered internal. External users might have internal or external segments. Empty or illegal segment_type for external user will be considered as external.
   * @return segmentType
  **/
  @ApiModelProperty(example = "External", value = "The type of the segment (Internal or External). Relevant only for User API (and not for SIS). For internal users, all the segments are considered internal. External users might have internal or external segments. Empty or illegal segment_type for external user will be considered as external.")
  @JsonProperty(JSON_PROPERTY_SEGMENT_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  @JacksonXmlProperty(isAttribute = true, localName = "segment_type")

  public String getSegmentType() {
    return segmentType;
  }


  public void setSegmentType(String segmentType) {
    this.segmentType = segmentType;
  }


  public UserNote noteType(UserNoteNoteType noteType) {

    this.noteType = noteType;
    return this;
  }

   /**
   * Get noteType
   * @return noteType
  **/
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_NOTE_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  @JacksonXmlProperty(localName = "note_type")

  public UserNoteNoteType getNoteType() {
    return noteType;
  }


  public void setNoteType(UserNoteNoteType noteType) {
    this.noteType = noteType;
  }


  public UserNote noteText(String noteText) {
    
    this.noteText = noteText;
    return this;
  }

   /**
   * The note&#39;s text. Mandatory.
   * @return noteText
  **/
  @ApiModelProperty(example = "ERP user note example", value = "The note's text. Mandatory.")
  @JsonProperty(JSON_PROPERTY_NOTE_TEXT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  @JacksonXmlProperty(localName = "note_text")

  public String getNoteText() {
    return noteText;
  }


  public void setNoteText(String noteText) {
    this.noteText = noteText;
  }


  public UserNote userViewable(Boolean userViewable) {
    
    this.userViewable = userViewable;
    return this;
  }

   /**
   * Indication whether the user is able to view the note. Default is false.
   * @return userViewable
  **/
  @ApiModelProperty(example = "false", required = true, value = "Indication whether the user is able to view the note. Default is false.")
  @JsonProperty(JSON_PROPERTY_USER_VIEWABLE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  @JacksonXmlProperty(localName = "user_viewable")

  public Boolean getUserViewable() {
    return userViewable;
  }


  public void setUserViewable(Boolean userViewable) {
    this.userViewable = userViewable;
  }


  public UserNote popupNote(Boolean popupNote) {
    
    this.popupNote = popupNote;
    return this;
  }

   /**
   * Indication whether the note supposed to popup while entering patron services. Default is false.
   * @return popupNote
  **/
  @ApiModelProperty(example = "false", required = true, value = "Indication whether the note supposed to popup while entering patron services. Default is false.")
  @JsonProperty(JSON_PROPERTY_POPUP_NOTE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  @JacksonXmlProperty(localName = "popup_note")

  public Boolean getPopupNote() {
    return popupNote;
  }


  public void setPopupNote(Boolean popupNote) {
    this.popupNote = popupNote;
  }


  public UserNote createdBy(String createdBy) {
    
    this.createdBy = createdBy;
    return this;
  }

   /**
   * Creator of the note.
   * @return createdBy
  **/
  @ApiModelProperty(value = "Creator of the note.")
  @JsonProperty(JSON_PROPERTY_CREATED_BY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  @JacksonXmlProperty(localName = "created_by")

  public String getCreatedBy() {
    return createdBy;
  }


  public void setCreatedBy(String createdBy) {
    this.createdBy = createdBy;
  }


  public UserNote createdDate(OffsetDateTime createdDate) {
    
    this.createdDate = createdDate;
    return this;
  }

   /**
   * Creation date of the note.
   * @return createdDate
  **/
  @ApiModelProperty(example = "2024-05-30T09:30:10Z", value = "Creation date of the note.")
  @JsonProperty(JSON_PROPERTY_CREATED_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  @JacksonXmlProperty(localName = "created_date")

  public OffsetDateTime getCreatedDate() {
    return createdDate;
  }


  public void setCreatedDate(OffsetDateTime createdDate) {
    this.createdDate = createdDate;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UserNote userNote = (UserNote) o;
    return Objects.equals(this.segmentType, userNote.segmentType) &&
        Objects.equals(this.noteType, userNote.noteType) &&
        Objects.equals(this.noteText, userNote.noteText) &&
        Objects.equals(this.userViewable, userNote.userViewable) &&
        Objects.equals(this.popupNote, userNote.popupNote) &&
        Objects.equals(this.createdBy, userNote.createdBy) &&
        Objects.equals(this.createdDate, userNote.createdDate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(segmentType, noteType, noteText, userViewable, popupNote, createdBy, createdDate);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UserNote2 {\n");
    sb.append("    segmentType: ").append(toIndentedString(segmentType)).append("\n");
    sb.append("    noteType: ").append(toIndentedString(noteType)).append("\n");
    sb.append("    noteText: ").append(toIndentedString(noteText)).append("\n");
    sb.append("    userViewable: ").append(toIndentedString(userViewable)).append("\n");
    sb.append("    popupNote: ").append(toIndentedString(popupNote)).append("\n");
    sb.append("    createdBy: ").append(toIndentedString(createdBy)).append("\n");
    sb.append("    createdDate: ").append(toIndentedString(createdDate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

