/*
 * Ex Libris APIs
 * For more information on how to use these APIs, including how to create an API key required for authentication, see [Alma REST APIs](https://developers.exlibrisgroup.com/alma/apis).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.unidue.ub.alma.shared.user;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlProperty;
import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlRootElement;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

import javax.xml.bind.annotation.*;
import java.io.Serializable;
import java.util.Objects;

/**
 * The user&#39;s [account type](https://developers.exlibrisgroup.com/blog/Users-API-working-with-external-internal-users). Possible code are listed in &#39;User Types - User&#39; [code table](https://developers.exlibrisgroup.com/blog/Working-with-the-code-tables-API). This field is mandatory in the User API. In the PUT action, it is possible to update Internal user to be External. It is NOT possible to update External user to be Internal. On SIS load, users are always created as External.
 */
@ApiModel(description = "The user's [account type](https://developers.exlibrisgroup.com/blog/Users-API-working-with-external-internal-users). Possible code are listed in 'User Types - User' [code table](https://developers.exlibrisgroup.com/blog/Working-with-the-code-tables-API). This field is mandatory in the User API. In the PUT action, it is possible to update Internal user to be External. It is NOT possible to update External user to be Internal. On SIS load, users are always created as External.")
@JsonPropertyOrder({
  UserAccountType.JSON_PROPERTY_DESC,
  UserAccountType.JSON_PROPERTY_VALUE
})

@XmlRootElement(name = "User2AccountType")
@XmlAccessorType(XmlAccessType.FIELD)
@JacksonXmlRootElement(localName = "User2AccountType")
public class UserAccountType implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_DESC = "desc";
  @XmlAttribute(name = "desc")
  private String desc;

  public static final String JSON_PROPERTY_VALUE = "value";
  @XmlElement(name = "xml_value")
  private String value;


  public UserAccountType desc(String desc) {
    
    this.desc = desc;
    return this;
  }

   /**
   * Get desc
   * @return desc
  **/
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_DESC)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  @JacksonXmlProperty(isAttribute = true, localName = "desc")

  public String getDesc() {
    return desc;
  }


  public void setDesc(String desc) {
    this.desc = desc;
  }


  public UserAccountType value(String value) {
    
    this.value = value;
    return this;
  }

   /**
   * Get value
   * @return value
  **/
  @ApiModelProperty(example = "INTERNAL", value = "")
  @JsonProperty(JSON_PROPERTY_VALUE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  @JacksonXmlProperty(localName = "xml_value")

  public String getValue() {
    return value;
  }


  public void setValue(String value) {
    this.value = value;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UserAccountType userAccountType = (UserAccountType) o;
    return Objects.equals(this.desc, userAccountType.desc) &&
        Objects.equals(this.value, userAccountType.value);
  }

  @Override
  public int hashCode() {
    return Objects.hash(desc, value);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class User2AccountType {\n");
    sb.append("    desc: ").append(toIndentedString(desc)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

