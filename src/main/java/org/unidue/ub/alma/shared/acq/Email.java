/*
 * Ex Libris APIs
 * For more information on how to use these APIs, including how to create an API key required for authentication, see [Alma REST APIs](https://developers.exlibrisgroup.com/alma/apis).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.unidue.ub.alma.shared.acq;

import java.util.Objects;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.dataformat.xml.annotation.*;
import javax.xml.bind.annotation.*;

/**
 * Specific vendor&#39;s email address.
 */
@ApiModel(description = "Specific vendor's email address.")
@JsonPropertyOrder({
  Email.JSON_PROPERTY_PREFERRED,
  Email.JSON_PROPERTY_EMAIL_ADDRESS,
  Email.JSON_PROPERTY_DESCRIPTION,
  Email.JSON_PROPERTY_EMAIL_TYPE
})

@XmlRootElement(name = "email")
@XmlAccessorType(XmlAccessType.FIELD)
@JacksonXmlRootElement(localName = "email")
public class Email implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_PREFERRED = "preferred";
  @XmlAttribute(name = "preferred")
  private Boolean preferred;

  public static final String JSON_PROPERTY_EMAIL_ADDRESS = "email_address";
  @XmlElement(name = "email_address")
  private String emailAddress;

  public static final String JSON_PROPERTY_DESCRIPTION = "description";
  @XmlElement(name = "description")
  private String description;

  public static final String JSON_PROPERTY_EMAIL_TYPE = "email_type";
  // Is a container wrapped=true
  // items.name=emailType items.baseName=emailType items.xmlName= items.xmlNamespace=
  // items.example= items.type=Email2EmailType
  @XmlElement(name = "emailType")
  @XmlElementWrapper(name = "email_types")
  private List<EmailEmailType> emailType = null;


  public Email preferred(Boolean preferred) {
    
    this.preferred = preferred;
    return this;
  }

   /**
   * Indication whether the email address is the preferred one. Only one address can be defined as preferred.
   * @return preferred
  **/

  @ApiModelProperty(example = "true", value = "Indication whether the email address is the preferred one. Only one address can be defined as preferred.")
  @JsonProperty(JSON_PROPERTY_PREFERRED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  @JacksonXmlProperty(isAttribute = true, localName = "preferred")

  public Boolean getPreferred() {
    return preferred;
  }


  public void setPreferred(Boolean preferred) {
    this.preferred = preferred;
  }


  public Email emailAddress(String emailAddress) {
    
    this.emailAddress = emailAddress;
    return this;
  }

   /**
   * The email address. Mandatory.
   * @return emailAddress
  **/

  @ApiModelProperty(example = "nosuchmail@no.such.mail.com", value = "The email address. Mandatory.")
  @JsonProperty(JSON_PROPERTY_EMAIL_ADDRESS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  @JacksonXmlProperty(localName = "email_address")

  public String getEmailAddress() {
    return emailAddress;
  }


  public void setEmailAddress(String emailAddress) {
    this.emailAddress = emailAddress;
  }


  public Email description(String description) {
    
    this.description = description;
    return this;
  }

   /**
   * The email address&#39; related description.
   * @return description
  **/

  @ApiModelProperty(example = "The Bookhouse, Inc.", value = "The email address' related description.")
  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  @JacksonXmlProperty(localName = "description")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    this.description = description;
  }


  public Email emailType(List<EmailEmailType> emailType) {
    
    this.emailType = emailType;
    return this;
  }

  public Email addEmailTypeItem(EmailEmailType emailTypeItem) {
    if (this.emailType == null) {
      this.emailType = new ArrayList<EmailEmailType>();
    }
    this.emailType.add(emailTypeItem);
    return this;
  }

   /**
   * The different email types. Mandatory.
   * @return emailType
  **/

  @ApiModelProperty(value = "The different email types. Mandatory.")
  @JsonProperty(JSON_PROPERTY_EMAIL_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  // items.xmlName=
  @JacksonXmlElementWrapper(useWrapping = true, localName = "emailType")

  public List<EmailEmailType> getEmailType() {
    return emailType;
  }


  public void setEmailType(List<EmailEmailType> emailType) {
    this.emailType = emailType;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Email email = (Email) o;
    return Objects.equals(this.preferred, email.preferred) &&
        Objects.equals(this.emailAddress, email.emailAddress) &&
        Objects.equals(this.description, email.description) &&
        Objects.equals(this.emailType, email.emailType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(preferred, emailAddress, description, emailType);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Email2 {\n");
    sb.append("    preferred: ").append(toIndentedString(preferred)).append("\n");
    sb.append("    emailAddress: ").append(toIndentedString(emailAddress)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    emailType: ").append(toIndentedString(emailType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

