/*
 * Ex Libris APIs
 * For more information on how to use these APIs, including how to create an API key required for authentication, see [Alma REST APIs](https://developers.exlibrisgroup.com/alma/apis).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.unidue.ub.alma.shared.acq;

import java.util.Objects;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.dataformat.xml.annotation.*;
import javax.xml.bind.annotation.*;

/**
 * EdiInfo2
 */
@JsonPropertyOrder({
  EdiInfo.JSON_PROPERTY_CODE,
  EdiInfo.JSON_PROPERTY_TYPE,
  EdiInfo.JSON_PROPERTY_NAMING_CONVENTION,
  EdiInfo.JSON_PROPERTY_VENDOR_FORMAT,
  EdiInfo.JSON_PROPERTY_INVOICES,
  EdiInfo.JSON_PROPERTY_PO_LINES,
  EdiInfo.JSON_PROPERTY_ADDITIONAL_ORDER_NUMBER,
  EdiInfo.JSON_PROPERTY_INCLUDE_FUND_CODE,
  EdiInfo.JSON_PROPERTY_DO_NOT_PRORATE,
  EdiInfo.JSON_PROPERTY_FUND_CODE,
  EdiInfo.JSON_PROPERTY_FTP_DESCRIPTION,
  EdiInfo.JSON_PROPERTY_SERVER_NAME,
  EdiInfo.JSON_PROPERTY_PORT_NUMBER,
  EdiInfo.JSON_PROPERTY_USER_NAME,
  EdiInfo.JSON_PROPERTY_PASSWORD,
  EdiInfo.JSON_PROPERTY_INPUT_PATH,
  EdiInfo.JSON_PROPERTY_OUTPUT_PATH,
  EdiInfo.JSON_PROPERTY_ALLOW_NAVIGATION,
  EdiInfo.JSON_PROPERTY_SECURED_FTP,
  EdiInfo.JSON_PROPERTY_SEND_COMMAND,
  EdiInfo.JSON_PROPERTY_PASSIVE_MODE,
  EdiInfo.JSON_PROPERTY_FTP_MODE,
  EdiInfo.JSON_PROPERTY_PER_ORGANIZATION_UNIT,
  EdiInfo.JSON_PROPERTY_EAN_ACCOUNT
})

@XmlRootElement(name = "edi_info")
@XmlAccessorType(XmlAccessType.FIELD)
@JacksonXmlRootElement(localName = "edi_info")
public class EdiInfo implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_CODE = "code";
  @XmlElement(name = "code")
  private String code;

  public static final String JSON_PROPERTY_TYPE = "type";
  @XmlElement(name = "type")
  private EdiInfoType type;

  public static final String JSON_PROPERTY_NAMING_CONVENTION = "naming_convention";
  @XmlElement(name = "naming_convention")
  private EdiInfoNamingConvention namingConvention;

  public static final String JSON_PROPERTY_VENDOR_FORMAT = "vendor_format";
  @XmlElement(name = "vendor_format")
  private EdiInfoVendorFormat vendorFormat;

  public static final String JSON_PROPERTY_INVOICES = "invoices";
  @XmlElement(name = "invoices")
  private Boolean invoices;

  public static final String JSON_PROPERTY_PO_LINES = "po_lines";
  @XmlElement(name = "po_lines")
  private Boolean poLines;

  public static final String JSON_PROPERTY_ADDITIONAL_ORDER_NUMBER = "additional_order_number";
  @XmlElement(name = "additional_order_number")
  private Boolean additionalOrderNumber;

  public static final String JSON_PROPERTY_INCLUDE_FUND_CODE = "include_fund_code";
  @XmlElement(name = "include_fund_code")
  private Boolean includeFundCode;

  public static final String JSON_PROPERTY_DO_NOT_PRORATE = "do_not_prorate";
  @XmlElement(name = "do_not_prorate")
  private Boolean doNotProrate;

  public static final String JSON_PROPERTY_FUND_CODE = "fund_code";
  @XmlElement(name = "fund_code")
  private EdiInfoFundCode fundCode;

  public static final String JSON_PROPERTY_FTP_DESCRIPTION = "ftp_description";
  @XmlElement(name = "ftp_description")
  private String ftpDescription;

  public static final String JSON_PROPERTY_SERVER_NAME = "server_name";
  @XmlElement(name = "server_name")
  private String serverName;

  public static final String JSON_PROPERTY_PORT_NUMBER = "port_number";
  @XmlElement(name = "port_number")
  private Integer portNumber;

  public static final String JSON_PROPERTY_USER_NAME = "user_name";
  @XmlElement(name = "user_name")
  private String userName;

  public static final String JSON_PROPERTY_PASSWORD = "password";
  @XmlElement(name = "password")
  private String password;

  public static final String JSON_PROPERTY_INPUT_PATH = "input_path";
  @XmlElement(name = "input_path")
  private String inputPath;

  public static final String JSON_PROPERTY_OUTPUT_PATH = "output_path";
  @XmlElement(name = "output_path")
  private String outputPath;

  public static final String JSON_PROPERTY_ALLOW_NAVIGATION = "allow_navigation";
  @XmlElement(name = "allow_navigation")
  private Boolean allowNavigation;

  public static final String JSON_PROPERTY_SECURED_FTP = "secured_ftp";
  @XmlElement(name = "secured_ftp")
  private Boolean securedFtp;

  public static final String JSON_PROPERTY_SEND_COMMAND = "send_command";
  @XmlElement(name = "send_command")
  private EdiInfoSendCommand sendCommand;

  public static final String JSON_PROPERTY_PASSIVE_MODE = "passive_mode";
  @XmlElement(name = "passive_mode")
  private Boolean passiveMode;

  public static final String JSON_PROPERTY_FTP_MODE = "ftp_mode";
  @XmlElement(name = "ftp_mode")
  private EdiInfoFtpMode ftpMode;

  public static final String JSON_PROPERTY_PER_ORGANIZATION_UNIT = "per_organization_unit";
  // Is a container wrapped=true
  // items.name=perOrganizationUnit items.baseName=perOrganizationUnit items.xmlName= items.xmlNamespace=
  // items.example= items.type=PerOrganizationUnit2
  @XmlElement(name = "perOrganizationUnit")
  @XmlElementWrapper(name = "per_organization_units")
  private List<PerOrganizationUnit> perOrganizationUnit = null;

  public static final String JSON_PROPERTY_EAN_ACCOUNT = "ean_account";
  // Is a container wrapped=true
  // items.name=eanAccount items.baseName=eanAccount items.xmlName= items.xmlNamespace=
  // items.example= items.type=EanAccount2
  @XmlElement(name = "eanAccount")
  @XmlElementWrapper(name = "ean_accounts")
  private List<EanAccount> eanAccount = null;


  public EdiInfo code(String code) {
    
    this.code = code;
    return this;
  }

   /**
   * A unique code for the vendor, per institution.
   * @return code
  **/
  @ApiModelProperty(required = true, value = "A unique code for the vendor, per institution.")
  @JsonProperty(JSON_PROPERTY_CODE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  @JacksonXmlProperty(localName = "code")

  public String getCode() {
    return code;
  }


  public void setCode(String code) {
    this.code = code;
  }


  public EdiInfo type(EdiInfoType type) {
    
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/

  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  @JacksonXmlProperty(localName = "type")

  public EdiInfoType getType() {
    return type;
  }


  public void setType(EdiInfoType type) {
    this.type = type;
  }


  public EdiInfo namingConvention(EdiInfoNamingConvention namingConvention) {
    
    this.namingConvention = namingConvention;
    return this;
  }

   /**
   * Get namingConvention
   * @return namingConvention
  **/

  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_NAMING_CONVENTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  @JacksonXmlProperty(localName = "naming_convention")

  public EdiInfoNamingConvention getNamingConvention() {
    return namingConvention;
  }


  public void setNamingConvention(EdiInfoNamingConvention namingConvention) {
    this.namingConvention = namingConvention;
  }


  public EdiInfo vendorFormat(EdiInfoVendorFormat vendorFormat) {
    
    this.vendorFormat = vendorFormat;
    return this;
  }

   /**
   * Get vendorFormat
   * @return vendorFormat
  **/

  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_VENDOR_FORMAT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  @JacksonXmlProperty(localName = "vendor_format")

  public EdiInfoVendorFormat getVendorFormat() {
    return vendorFormat;
  }


  public void setVendorFormat(EdiInfoVendorFormat vendorFormat) {
    this.vendorFormat = vendorFormat;
  }


  public EdiInfo invoices(Boolean invoices) {
    
    this.invoices = invoices;
    return this;
  }

   /**
   * Indication whether the vendor submits invoices via EDI files.
   * @return invoices
  **/

  @ApiModelProperty(example = "false", value = "Indication whether the vendor submits invoices via EDI files.")
  @JsonProperty(JSON_PROPERTY_INVOICES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  @JacksonXmlProperty(localName = "invoices")

  public Boolean getInvoices() {
    return invoices;
  }


  public void setInvoices(Boolean invoices) {
    this.invoices = invoices;
  }


  public EdiInfo poLines(Boolean poLines) {
    
    this.poLines = poLines;
    return this;
  }

   /**
   * Indication whether PO lines are sent to the vendor via EDI files.
   * @return poLines
  **/

  @ApiModelProperty(example = "false", value = "Indication whether PO lines are sent to the vendor via EDI files.")
  @JsonProperty(JSON_PROPERTY_PO_LINES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  @JacksonXmlProperty(localName = "po_lines")

  public Boolean getPoLines() {
    return poLines;
  }


  public void setPoLines(Boolean poLines) {
    this.poLines = poLines;
  }


  public EdiInfo additionalOrderNumber(Boolean additionalOrderNumber) {
    
    this.additionalOrderNumber = additionalOrderNumber;
    return this;
  }

   /**
   * Indication whether additional PO number should be included in the EDI file sent to the vendor.
   * @return additionalOrderNumber
  **/

  @ApiModelProperty(example = "false", value = "Indication whether additional PO number should be included in the EDI file sent to the vendor.")
  @JsonProperty(JSON_PROPERTY_ADDITIONAL_ORDER_NUMBER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  @JacksonXmlProperty(localName = "additional_order_number")

  public Boolean getAdditionalOrderNumber() {
    return additionalOrderNumber;
  }


  public void setAdditionalOrderNumber(Boolean additionalOrderNumber) {
    this.additionalOrderNumber = additionalOrderNumber;
  }


  public EdiInfo includeFundCode(Boolean includeFundCode) {
    
    this.includeFundCode = includeFundCode;
    return this;
  }

   /**
   * Indication whether fund code should be included in the EDI files sent to the vendor and received from the vendor.
   * @return includeFundCode
  **/

  @ApiModelProperty(example = "false", value = "Indication whether fund code should be included in the EDI files sent to the vendor and received from the vendor.")
  @JsonProperty(JSON_PROPERTY_INCLUDE_FUND_CODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  @JacksonXmlProperty(localName = "include_fund_code")

  public Boolean getIncludeFundCode() {
    return includeFundCode;
  }


  public void setIncludeFundCode(Boolean includeFundCode) {
    this.includeFundCode = includeFundCode;
  }


  public EdiInfo doNotProrate(Boolean doNotProrate) {
    
    this.doNotProrate = doNotProrate;
    return this;
  }

   /**
   * Get doNotProrate
   * @return doNotProrate
  **/

  @ApiModelProperty(example = "false", value = "")
  @JsonProperty(JSON_PROPERTY_DO_NOT_PRORATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  @JacksonXmlProperty(localName = "do_not_prorate")

  public Boolean getDoNotProrate() {
    return doNotProrate;
  }


  public void setDoNotProrate(Boolean doNotProrate) {
    this.doNotProrate = doNotProrate;
  }


  public EdiInfo fundCode(EdiInfoFundCode fundCode) {
    
    this.fundCode = fundCode;
    return this;
  }

   /**
   * Get fundCode
   * @return fundCode
  **/

  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_FUND_CODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  @JacksonXmlProperty(localName = "fund_code")

  public EdiInfoFundCode getFundCode() {
    return fundCode;
  }


  public void setFundCode(EdiInfoFundCode fundCode) {
    this.fundCode = fundCode;
  }


  public EdiInfo ftpDescription(String ftpDescription) {
    
    this.ftpDescription = ftpDescription;
    return this;
  }

   /**
   * Optional description of the EDI submission details.
   * @return ftpDescription
  **/

  @ApiModelProperty(value = "Optional description of the EDI submission details.")
  @JsonProperty(JSON_PROPERTY_FTP_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  @JacksonXmlProperty(localName = "ftp_description")

  public String getFtpDescription() {
    return ftpDescription;
  }


  public void setFtpDescription(String ftpDescription) {
    this.ftpDescription = ftpDescription;
  }


  public EdiInfo serverName(String serverName) {
    
    this.serverName = serverName;
    return this;
  }

   /**
   * The IP address of the FTP server receiving the EDI files.
   * @return serverName
  **/

  @ApiModelProperty(value = "The IP address of the FTP server receiving the EDI files.")
  @JsonProperty(JSON_PROPERTY_SERVER_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  @JacksonXmlProperty(localName = "server_name")

  public String getServerName() {
    return serverName;
  }


  public void setServerName(String serverName) {
    this.serverName = serverName;
  }


  public EdiInfo portNumber(Integer portNumber) {
    
    this.portNumber = portNumber;
    return this;
  }

   /**
   * The port to be used on the FTP server, if the connection is not secure. This is generally port 21.
   * @return portNumber
  **/

  @ApiModelProperty(value = "The port to be used on the FTP server, if the connection is not secure. This is generally port 21.")
  @JsonProperty(JSON_PROPERTY_PORT_NUMBER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  @JacksonXmlProperty(localName = "port_number")

  public Integer getPortNumber() {
    return portNumber;
  }


  public void setPortNumber(Integer portNumber) {
    this.portNumber = portNumber;
  }


  public EdiInfo userName(String userName) {
    
    this.userName = userName;
    return this;
  }

   /**
   * The user name for logging on to the FTP server.
   * @return userName
  **/

  @ApiModelProperty(value = "The user name for logging on to the FTP server.")
  @JsonProperty(JSON_PROPERTY_USER_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  @JacksonXmlProperty(localName = "user_name")

  public String getUserName() {
    return userName;
  }


  public void setUserName(String userName) {
    this.userName = userName;
  }


  public EdiInfo password(String password) {
    
    this.password = password;
    return this;
  }

   /**
   * The password for the FTP server.
   * @return password
  **/

  @ApiModelProperty(value = "The password for the FTP server.")
  @JsonProperty(JSON_PROPERTY_PASSWORD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  @JacksonXmlProperty(localName = "password")

  public String getPassword() {
    return password;
  }


  public void setPassword(String password) {
    this.password = password;
  }


  public EdiInfo inputPath(String inputPath) {
    
    this.inputPath = inputPath;
    return this;
  }

   /**
   * The name of the subdirectory in which the incoming invoice EDI files are to be stored. By default, Alma displays invoices in this field. If you leave this field empty, Alma searches for incoming files in the root directory.
   * @return inputPath
  **/

  @ApiModelProperty(value = "The name of the subdirectory in which the incoming invoice EDI files are to be stored. By default, Alma displays invoices in this field. If you leave this field empty, Alma searches for incoming files in the root directory.")
  @JsonProperty(JSON_PROPERTY_INPUT_PATH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  @JacksonXmlProperty(localName = "input_path")

  public String getInputPath() {
    return inputPath;
  }


  public void setInputPath(String inputPath) {
    this.inputPath = inputPath;
  }


  public EdiInfo outputPath(String outputPath) {
    
    this.outputPath = outputPath;
    return this;
  }

   /**
   * The name of the subdirectory in which the outgoing PO EDI files are to be stored. By default, Alma displays orders in this field. If you leave this field empty, Alma places the PO EDI files in the root directory.
   * @return outputPath
  **/

  @ApiModelProperty(value = "The name of the subdirectory in which the outgoing PO EDI files are to be stored. By default, Alma displays orders in this field. If you leave this field empty, Alma places the PO EDI files in the root directory.")
  @JsonProperty(JSON_PROPERTY_OUTPUT_PATH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  @JacksonXmlProperty(localName = "output_path")

  public String getOutputPath() {
    return outputPath;
  }


  public void setOutputPath(String outputPath) {
    this.outputPath = outputPath;
  }


  public EdiInfo allowNavigation(Boolean allowNavigation) {
    
    this.allowNavigation = allowNavigation;
    return this;
  }

   /**
   * Indication whether access to other areas of the FTP site is enabled.
   * @return allowNavigation
  **/

  @ApiModelProperty(example = "false", value = "Indication whether access to other areas of the FTP site is enabled.")
  @JsonProperty(JSON_PROPERTY_ALLOW_NAVIGATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  @JacksonXmlProperty(localName = "allow_navigation")

  public Boolean getAllowNavigation() {
    return allowNavigation;
  }


  public void setAllowNavigation(Boolean allowNavigation) {
    this.allowNavigation = allowNavigation;
  }


  public EdiInfo securedFtp(Boolean securedFtp) {
    
    this.securedFtp = securedFtp;
    return this;
  }

   /**
   * Indication whether the FTP server is secured.
   * @return securedFtp
  **/

  @ApiModelProperty(example = "false", value = "Indication whether the FTP server is secured.")
  @JsonProperty(JSON_PROPERTY_SECURED_FTP)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  @JacksonXmlProperty(localName = "secured_ftp")

  public Boolean getSecuredFtp() {
    return securedFtp;
  }


  public void setSecuredFtp(Boolean securedFtp) {
    this.securedFtp = securedFtp;
  }


  public EdiInfo sendCommand(EdiInfoSendCommand sendCommand) {
    
    this.sendCommand = sendCommand;
    return this;
  }

   /**
   * Get sendCommand
   * @return sendCommand
  **/

  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_SEND_COMMAND)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  @JacksonXmlProperty(localName = "send_command")

  public EdiInfoSendCommand getSendCommand() {
    return sendCommand;
  }


  public void setSendCommand(EdiInfoSendCommand sendCommand) {
    this.sendCommand = sendCommand;
  }


  public EdiInfo passiveMode(Boolean passiveMode) {
    
    this.passiveMode = passiveMode;
    return this;
  }

   /**
   * Currently not in use.
   * @return passiveMode
  **/

  @ApiModelProperty(example = "false", value = "Currently not in use.")
  @JsonProperty(JSON_PROPERTY_PASSIVE_MODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  @JacksonXmlProperty(localName = "passive_mode")

  public Boolean getPassiveMode() {
    return passiveMode;
  }


  public void setPassiveMode(Boolean passiveMode) {
    this.passiveMode = passiveMode;
  }


  public EdiInfo ftpMode(EdiInfoFtpMode ftpMode) {
    
    this.ftpMode = ftpMode;
    return this;
  }

   /**
   * Get ftpMode
   * @return ftpMode
  **/

  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_FTP_MODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  @JacksonXmlProperty(localName = "ftp_mode")

  public EdiInfoFtpMode getFtpMode() {
    return ftpMode;
  }


  public void setFtpMode(EdiInfoFtpMode ftpMode) {
    this.ftpMode = ftpMode;
  }


  public EdiInfo perOrganizationUnit(List<PerOrganizationUnit> perOrganizationUnit) {
    
    this.perOrganizationUnit = perOrganizationUnit;
    return this;
  }

  public EdiInfo addPerOrganizationUnitItem(PerOrganizationUnit perOrganizationUnitItem) {
    if (this.perOrganizationUnit == null) {
      this.perOrganizationUnit = new ArrayList<PerOrganizationUnit>();
    }
    this.perOrganizationUnit.add(perOrganizationUnitItem);
    return this;
  }

   /**
   * List of EDI codes and types for specific libraries, if used by the vendor. One entry must be defined for the institution and its EDI code and type. In the PUT action the incoming list will replace the existing list. If the incoming list is empty, the existing list will be deleted.
   * @return perOrganizationUnit
  **/

  @ApiModelProperty(value = "List of EDI codes and types for specific libraries, if used by the vendor. One entry must be defined for the institution and its EDI code and type. In the PUT action the incoming list will replace the existing list. If the incoming list is empty, the existing list will be deleted.")
  @JsonProperty(JSON_PROPERTY_PER_ORGANIZATION_UNIT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  // items.xmlName=
  @JacksonXmlElementWrapper(useWrapping = true, localName = "perOrganizationUnit")

  public List<PerOrganizationUnit> getPerOrganizationUnit() {
    return perOrganizationUnit;
  }


  public void setPerOrganizationUnit(List<PerOrganizationUnit> perOrganizationUnit) {
    this.perOrganizationUnit = perOrganizationUnit;
  }


  public EdiInfo eanAccount(List<EanAccount> eanAccount) {
    
    this.eanAccount = eanAccount;
    return this;
  }

  public EdiInfo addEanAccountItem(EanAccount eanAccountItem) {
    if (this.eanAccount == null) {
      this.eanAccount = new ArrayList<EanAccount>();
    }
    this.eanAccount.add(eanAccountItem);
    return this;
  }

   /**
   * List of mappings of EAN (Envelope Address Node) code to the vendor account. In the PUT action the incoming list will replace the existing list. If the incoming list is empty, the existing list will be deleted.
   * @return eanAccount
  **/

  @ApiModelProperty(value = "List of mappings of EAN (Envelope Address Node) code to the vendor account. In the PUT action the incoming list will replace the existing list. If the incoming list is empty, the existing list will be deleted.")
  @JsonProperty(JSON_PROPERTY_EAN_ACCOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  // items.xmlName=
  @JacksonXmlElementWrapper(useWrapping = true, localName = "eanAccount")

  public List<EanAccount> getEanAccount() {
    return eanAccount;
  }


  public void setEanAccount(List<EanAccount> eanAccount) {
    this.eanAccount = eanAccount;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EdiInfo ediInfo = (EdiInfo) o;
    return Objects.equals(this.code, ediInfo.code) &&
        Objects.equals(this.type, ediInfo.type) &&
        Objects.equals(this.namingConvention, ediInfo.namingConvention) &&
        Objects.equals(this.vendorFormat, ediInfo.vendorFormat) &&
        Objects.equals(this.invoices, ediInfo.invoices) &&
        Objects.equals(this.poLines, ediInfo.poLines) &&
        Objects.equals(this.additionalOrderNumber, ediInfo.additionalOrderNumber) &&
        Objects.equals(this.includeFundCode, ediInfo.includeFundCode) &&
        Objects.equals(this.doNotProrate, ediInfo.doNotProrate) &&
        Objects.equals(this.fundCode, ediInfo.fundCode) &&
        Objects.equals(this.ftpDescription, ediInfo.ftpDescription) &&
        Objects.equals(this.serverName, ediInfo.serverName) &&
        Objects.equals(this.portNumber, ediInfo.portNumber) &&
        Objects.equals(this.userName, ediInfo.userName) &&
        Objects.equals(this.password, ediInfo.password) &&
        Objects.equals(this.inputPath, ediInfo.inputPath) &&
        Objects.equals(this.outputPath, ediInfo.outputPath) &&
        Objects.equals(this.allowNavigation, ediInfo.allowNavigation) &&
        Objects.equals(this.securedFtp, ediInfo.securedFtp) &&
        Objects.equals(this.sendCommand, ediInfo.sendCommand) &&
        Objects.equals(this.passiveMode, ediInfo.passiveMode) &&
        Objects.equals(this.ftpMode, ediInfo.ftpMode) &&
        Objects.equals(this.perOrganizationUnit, ediInfo.perOrganizationUnit) &&
        Objects.equals(this.eanAccount, ediInfo.eanAccount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(code, type, namingConvention, vendorFormat, invoices, poLines, additionalOrderNumber, includeFundCode, doNotProrate, fundCode, ftpDescription, serverName, portNumber, userName, password, inputPath, outputPath, allowNavigation, securedFtp, sendCommand, passiveMode, ftpMode, perOrganizationUnit, eanAccount);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EdiInfo2 {\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    namingConvention: ").append(toIndentedString(namingConvention)).append("\n");
    sb.append("    vendorFormat: ").append(toIndentedString(vendorFormat)).append("\n");
    sb.append("    invoices: ").append(toIndentedString(invoices)).append("\n");
    sb.append("    poLines: ").append(toIndentedString(poLines)).append("\n");
    sb.append("    additionalOrderNumber: ").append(toIndentedString(additionalOrderNumber)).append("\n");
    sb.append("    includeFundCode: ").append(toIndentedString(includeFundCode)).append("\n");
    sb.append("    doNotProrate: ").append(toIndentedString(doNotProrate)).append("\n");
    sb.append("    fundCode: ").append(toIndentedString(fundCode)).append("\n");
    sb.append("    ftpDescription: ").append(toIndentedString(ftpDescription)).append("\n");
    sb.append("    serverName: ").append(toIndentedString(serverName)).append("\n");
    sb.append("    portNumber: ").append(toIndentedString(portNumber)).append("\n");
    sb.append("    userName: ").append(toIndentedString(userName)).append("\n");
    sb.append("    password: ").append(toIndentedString(password)).append("\n");
    sb.append("    inputPath: ").append(toIndentedString(inputPath)).append("\n");
    sb.append("    outputPath: ").append(toIndentedString(outputPath)).append("\n");
    sb.append("    allowNavigation: ").append(toIndentedString(allowNavigation)).append("\n");
    sb.append("    securedFtp: ").append(toIndentedString(securedFtp)).append("\n");
    sb.append("    sendCommand: ").append(toIndentedString(sendCommand)).append("\n");
    sb.append("    passiveMode: ").append(toIndentedString(passiveMode)).append("\n");
    sb.append("    ftpMode: ").append(toIndentedString(ftpMode)).append("\n");
    sb.append("    perOrganizationUnit: ").append(toIndentedString(perOrganizationUnit)).append("\n");
    sb.append("    eanAccount: ").append(toIndentedString(eanAccount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

