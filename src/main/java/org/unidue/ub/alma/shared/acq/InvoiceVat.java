/*
 * Ex Libris APIs
 * For more information on how to use these APIs, including how to create an API key required for authentication, see [Alma REST APIs](https://developers.exlibrisgroup.com/alma/apis).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.unidue.ub.alma.shared.acq;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.dataformat.xml.annotation.*;
import javax.xml.bind.annotation.*;

/**
 * VAT charge that is included in the invoice.
 */
@ApiModel(description = "VAT charge that is included in the invoice.")
@JsonPropertyOrder({
  InvoiceVat.JSON_PROPERTY_REPORT_TAX,
  InvoiceVat.JSON_PROPERTY_VAT_PER_INVOICE_LINE,
  InvoiceVat.JSON_PROPERTY_VAT_CODE,
  InvoiceVat.JSON_PROPERTY_PERCENTAGE,
  InvoiceVat.JSON_PROPERTY_VAT_AMOUNT,
  InvoiceVat.JSON_PROPERTY_TYPE,
  InvoiceVat.JSON_PROPERTY_EXPENDED_FROM_FUND,
  InvoiceVat.JSON_PROPERTY_VENDOR_TAX
})

@XmlRootElement(name = "invoice_vat")
@XmlAccessorType(XmlAccessType.FIELD)
@JacksonXmlRootElement(localName = "invoice_vat")
public class InvoiceVat implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_REPORT_TAX = "report_tax";
  @XmlElement(name = "report_tax")
  private Boolean reportTax;

  public static final String JSON_PROPERTY_VAT_PER_INVOICE_LINE = "vat_per_invoice_line";
  @XmlElement(name = "vat_per_invoice_line")
  private Boolean vatPerInvoiceLine;

  public static final String JSON_PROPERTY_VAT_CODE = "vat_code";
  @XmlElement(name = "vat_code")
  private InvoiceVatVatCode vatCode;

  public static final String JSON_PROPERTY_PERCENTAGE = "percentage";
  @XmlElement(name = "percentage")
  private Double percentage;

  public static final String JSON_PROPERTY_VAT_AMOUNT = "vat_amount";
  @XmlElement(name = "vat_amount")
  private Double vatAmount;

  public static final String JSON_PROPERTY_TYPE = "type";
  @XmlElement(name = "type")
  private InvoiceVatType type;

  public static final String JSON_PROPERTY_EXPENDED_FROM_FUND = "expended_from_fund";
  @XmlElement(name = "expended_from_fund")
  private Boolean expendedFromFund;

  public static final String JSON_PROPERTY_VENDOR_TAX = "vendor_tax";
  @XmlElement(name = "vendor_tax")
  private String vendorTax;


  public InvoiceVat reportTax(Boolean reportTax) {
    
    this.reportTax = reportTax;
    return this;
  }

   /**
   * Indication whether governmental vendor can be configured to receive use tax (VAT) on this invoice. Default is false.
   * @return reportTax
  **/
  
  @ApiModelProperty(example = "false", value = "Indication whether governmental vendor can be configured to receive use tax (VAT) on this invoice. Default is false.")
  @JsonProperty(JSON_PROPERTY_REPORT_TAX)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  @JacksonXmlProperty(localName = "report_tax")

  public Boolean getReportTax() {
    return reportTax;
  }


  public void setReportTax(Boolean reportTax) {
    this.reportTax = reportTax;
  }


  public InvoiceVat vatPerInvoiceLine(Boolean vatPerInvoiceLine) {
    
    this.vatPerInvoiceLine = vatPerInvoiceLine;
    return this;
  }

   /**
   * Indication whether the invoice vat is in invoice line level. Default is false.
   * @return vatPerInvoiceLine
  **/
  
  @ApiModelProperty(example = "false", value = "Indication whether the invoice vat is in invoice line level. Default is false.")
  @JsonProperty(JSON_PROPERTY_VAT_PER_INVOICE_LINE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  @JacksonXmlProperty(localName = "vat_per_invoice_line")

  public Boolean getVatPerInvoiceLine() {
    return vatPerInvoiceLine;
  }


  public void setVatPerInvoiceLine(Boolean vatPerInvoiceLine) {
    this.vatPerInvoiceLine = vatPerInvoiceLine;
  }


  public InvoiceVat vatCode(InvoiceVatVatCode vatCode) {
    
    this.vatCode = vatCode;
    return this;
  }

   /**
   * Get vatCode
   * @return vatCode
  **/
  
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_VAT_CODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  @JacksonXmlProperty(localName = "vat_code")

  public InvoiceVatVatCode getVatCode() {
    return vatCode;
  }


  public void setVatCode(InvoiceVatVatCode vatCode) {
    this.vatCode = vatCode;
  }


  public InvoiceVat percentage(Double percentage) {
    
    this.percentage = percentage;
    return this;
  }

   /**
   * VAT Percentage of the invoice total amount. In POST and PUT actions, percentage or vat_amount should be supplied, but not both. If vat_code is defined, percentage and vat_amount should be left empty in these actions.
   * @return percentage
  **/
  
  @ApiModelProperty(example = "17.00", value = "VAT Percentage of the invoice total amount. In POST and PUT actions, percentage or vat_amount should be supplied, but not both. If vat_code is defined, percentage and vat_amount should be left empty in these actions.")
  @JsonProperty(JSON_PROPERTY_PERCENTAGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  @JacksonXmlProperty(localName = "percentage")

  public Double getPercentage() {
    return percentage;
  }


  public void setPercentage(Double percentage) {
    this.percentage = percentage;
  }


  public InvoiceVat vatAmount(Double vatAmount) {
    
    this.vatAmount = vatAmount;
    return this;
  }

   /**
   * Amount of VAT to be paid on the invoice. In POST and PUT actions, percentage or vat_amount should be supplied, but not both. If vat_code is defined, percentage and vat_amount should be left empty in these actions.
   * @return vatAmount
  **/
  
  @ApiModelProperty(example = "17.44", value = "Amount of VAT to be paid on the invoice. In POST and PUT actions, percentage or vat_amount should be supplied, but not both. If vat_code is defined, percentage and vat_amount should be left empty in these actions.")
  @JsonProperty(JSON_PROPERTY_VAT_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  @JacksonXmlProperty(localName = "vat_amount")

  public Double getVatAmount() {
    return vatAmount;
  }


  public void setVatAmount(Double vatAmount) {
    this.vatAmount = vatAmount;
  }


  public InvoiceVat type(InvoiceVatType type) {
    
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  @JacksonXmlProperty(localName = "type")

  public InvoiceVatType getType() {
    return type;
  }


  public void setType(InvoiceVatType type) {
    this.type = type;
  }


  public InvoiceVat expendedFromFund(Boolean expendedFromFund) {
    
    this.expendedFromFund = expendedFromFund;
    return this;
  }

   /**
   * Indication whether the VAT amount is expended from the invoice line&#39;s fund. If set to false, the VAT amount is expended from a separate fund (adjustment invoice line). Default is true.
   * @return expendedFromFund
  **/
  
  @ApiModelProperty(example = "true", value = "Indication whether the VAT amount is expended from the invoice line's fund. If set to false, the VAT amount is expended from a separate fund (adjustment invoice line). Default is true.")
  @JsonProperty(JSON_PROPERTY_EXPENDED_FROM_FUND)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  @JacksonXmlProperty(localName = "expended_from_fund")

  public Boolean getExpendedFromFund() {
    return expendedFromFund;
  }


  public void setExpendedFromFund(Boolean expendedFromFund) {
    this.expendedFromFund = expendedFromFund;
  }


  public InvoiceVat vendorTax(String vendorTax) {
    
    this.vendorTax = vendorTax;
    return this;
  }

   /**
   * Textual note that indicates that the invoice is in a foreign currency and the VAT is charged in the local currency.
   * @return vendorTax
  **/
  
  @ApiModelProperty(example = "ILS", value = "Textual note that indicates that the invoice is in a foreign currency and the VAT is charged in the local currency.")
  @JsonProperty(JSON_PROPERTY_VENDOR_TAX)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  @JacksonXmlProperty(localName = "vendor_tax")

  public String getVendorTax() {
    return vendorTax;
  }


  public void setVendorTax(String vendorTax) {
    this.vendorTax = vendorTax;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InvoiceVat invoiceVat = (InvoiceVat) o;
    return Objects.equals(this.reportTax, invoiceVat.reportTax) &&
        Objects.equals(this.vatPerInvoiceLine, invoiceVat.vatPerInvoiceLine) &&
        Objects.equals(this.vatCode, invoiceVat.vatCode) &&
        Objects.equals(this.percentage, invoiceVat.percentage) &&
        Objects.equals(this.vatAmount, invoiceVat.vatAmount) &&
        Objects.equals(this.type, invoiceVat.type) &&
        Objects.equals(this.expendedFromFund, invoiceVat.expendedFromFund) &&
        Objects.equals(this.vendorTax, invoiceVat.vendorTax);
  }

  @Override
  public int hashCode() {
    return Objects.hash(reportTax, vatPerInvoiceLine, vatCode, percentage, vatAmount, type, expendedFromFund, vendorTax);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InvoiceVat {\n");
    sb.append("    reportTax: ").append(toIndentedString(reportTax)).append("\n");
    sb.append("    vatPerInvoiceLine: ").append(toIndentedString(vatPerInvoiceLine)).append("\n");
    sb.append("    vatCode: ").append(toIndentedString(vatCode)).append("\n");
    sb.append("    percentage: ").append(toIndentedString(percentage)).append("\n");
    sb.append("    vatAmount: ").append(toIndentedString(vatAmount)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    expendedFromFund: ").append(toIndentedString(expendedFromFund)).append("\n");
    sb.append("    vendorTax: ").append(toIndentedString(vendorTax)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

