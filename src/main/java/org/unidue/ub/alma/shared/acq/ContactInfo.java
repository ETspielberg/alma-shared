/*
 * Ex Libris APIs
 * For more information on how to use these APIs, including how to create an API key required for authentication, see [Alma REST APIs](https://developers.exlibrisgroup.com/alma/apis).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.unidue.ub.alma.shared.acq;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.dataformat.xml.annotation.*;
import javax.xml.bind.annotation.*;

/**
 * List of the contacts information. In the PUT action the incoming list will replace the existing list. If the incoming list is empty, the existing list will be deleted.
 */
@ApiModel(description = "List of the contacts information. In the PUT action the incoming list will replace the existing list. If the incoming list is empty, the existing list will be deleted.")
@JsonPropertyOrder({
  ContactInfo.JSON_PROPERTY_ADDRESS,
  ContactInfo.JSON_PROPERTY_EMAIL,
  ContactInfo.JSON_PROPERTY_PHONE,
  ContactInfo.JSON_PROPERTY_WEB_ADDRESS
})

@XmlRootElement(name = "contact_info")
@XmlAccessorType(XmlAccessType.FIELD)
@JacksonXmlRootElement(localName = "contact_info")
public class ContactInfo implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_ADDRESS = "address";
  // Is a container wrapped=true
  // items.name=address items.baseName=address items.xmlName= items.xmlNamespace=
  // items.example= items.type=Address2
  @XmlElement(name = "address")
  @XmlElementWrapper(name = "addresses")
  private List<Address> address = null;

  public static final String JSON_PROPERTY_EMAIL = "email";
  // Is a container wrapped=true
  // items.name=email items.baseName=email items.xmlName= items.xmlNamespace=
  // items.example= items.type=Email2
  @XmlElement(name = "email")
  @XmlElementWrapper(name = "emails")
  private List<Email> email = null;

  public static final String JSON_PROPERTY_PHONE = "phone";
  // Is a container wrapped=true
  // items.name=phone items.baseName=phone items.xmlName= items.xmlNamespace=
  // items.example= items.type=Phone2
  @XmlElement(name = "phone")
  @XmlElementWrapper(name = "phones")
  private List<Phone> phone = null;

  public static final String JSON_PROPERTY_WEB_ADDRESS = "web_address";
  // Is a container wrapped=true
  // items.name=webAddress items.baseName=webAddress items.xmlName= items.xmlNamespace=
  // items.example= items.type=WebAddress2
  @XmlElement(name = "webAddress")
  @XmlElementWrapper(name = "web_addresses")
  private List<WebAddress> webAddress = null;


  public ContactInfo address(List<Address> address) {
    
    this.address = address;
    return this;
  }

  public ContactInfo addAddressItem(Address addressItem) {
    if (this.address == null) {
      this.address = new ArrayList<Address>();
    }
    this.address.add(addressItem);
    return this;
  }

   /**
   * List of vendor&#39;s addresses.
   * @return address
  **/

  @ApiModelProperty(value = "List of vendor's addresses.")
  @JsonProperty(JSON_PROPERTY_ADDRESS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  // items.xmlName=
  @JacksonXmlElementWrapper(useWrapping = true, localName = "address")

  public List<Address> getAddress() {
    return address;
  }


  public void setAddress(List<Address> address) {
    this.address = address;
  }


  public ContactInfo email(List<Email> email) {
    
    this.email = email;
    return this;
  }

  public ContactInfo addEmailItem(Email emailItem) {
    if (this.email == null) {
      this.email = new ArrayList<Email>();
    }
    this.email.add(emailItem);
    return this;
  }

   /**
   * List of vendor&#39;s email addresses.
   * @return email
  **/

  @ApiModelProperty(value = "List of vendor's email addresses.")
  @JsonProperty(JSON_PROPERTY_EMAIL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  // items.xmlName=
  @JacksonXmlElementWrapper(useWrapping = true, localName = "email")

  public List<Email> getEmail() {
    return email;
  }


  public void setEmail(List<Email> email) {
    this.email = email;
  }


  public ContactInfo phone(List<Phone> phone) {
    
    this.phone = phone;
    return this;
  }

  public ContactInfo addPhoneItem(Phone phoneItem) {
    if (this.phone == null) {
      this.phone = new ArrayList<Phone>();
    }
    this.phone.add(phoneItem);
    return this;
  }

   /**
   * List of vendor&#39;s phone numbers.
   * @return phone
  **/

  @ApiModelProperty(value = "List of vendor's phone numbers.")
  @JsonProperty(JSON_PROPERTY_PHONE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  // items.xmlName=
  @JacksonXmlElementWrapper(useWrapping = true, localName = "phone")

  public List<Phone> getPhone() {
    return phone;
  }


  public void setPhone(List<Phone> phone) {
    this.phone = phone;
  }


  public ContactInfo webAddress(List<WebAddress> webAddress) {
    
    this.webAddress = webAddress;
    return this;
  }

  public ContactInfo addWebAddressItem(WebAddress webAddressItem) {
    if (this.webAddress == null) {
      this.webAddress = new ArrayList<>();
    }
    this.webAddress.add(webAddressItem);
    return this;
  }

   /**
   * List of vendor&#39;s web addresses.
   * @return webAddress
  **/

  @ApiModelProperty(value = "List of vendor's web addresses.")
  @JsonProperty(JSON_PROPERTY_WEB_ADDRESS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  // items.xmlName=
  @JacksonXmlElementWrapper(useWrapping = true, localName = "webAddress")

  public List<WebAddress> getWebAddress() {
    return webAddress;
  }


  public void setWebAddress(List<WebAddress> webAddress) {
    this.webAddress = webAddress;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ContactInfo contactInfo = (ContactInfo) o;
    return Objects.equals(this.address, contactInfo.address) &&
        Objects.equals(this.email, contactInfo.email) &&
        Objects.equals(this.phone, contactInfo.phone) &&
        Objects.equals(this.webAddress, contactInfo.webAddress);
  }

  @Override
  public int hashCode() {
    return Objects.hash(address, email, phone, webAddress);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ContactInfo2 {\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    phone: ").append(toIndentedString(phone)).append("\n");
    sb.append("    webAddress: ").append(toIndentedString(webAddress)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

