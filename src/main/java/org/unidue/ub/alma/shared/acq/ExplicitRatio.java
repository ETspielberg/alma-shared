/*
 * Ex Libris APIs
 * For more information on how to use these APIs, including how to create an API key required for authentication, see [Alma REST APIs](https://developers.exlibrisgroup.com/alma/apis).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.unidue.ub.alma.shared.acq;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.dataformat.xml.annotation.*;
import javax.xml.bind.annotation.*;

/**
 * Exchange rate between the invoice currency and foreign currency. Relevant only if the institution has ledgers in more than one currency.
 */
@ApiModel(description = "Exchange rate between the invoice currency and foreign currency. Relevant only if the institution has ledgers in more than one currency.")
@JsonPropertyOrder({
  ExplicitRatio.JSON_PROPERTY_FOREIGN_CURRENCY,
  ExplicitRatio.JSON_PROPERTY_RATE
})

@XmlRootElement(name = "explicit_ratio")
@XmlAccessorType(XmlAccessType.FIELD)
@JacksonXmlRootElement(localName = "explicit_ratio")
public class ExplicitRatio implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_FOREIGN_CURRENCY = "foreign_currency";
  @XmlElement(name = "foreign_currency")
  private ExplicitRatioForeignCurrency foreignCurrency;

  public static final String JSON_PROPERTY_RATE = "rate";
  @XmlElement(name = "rate")
  private Double rate;


  public ExplicitRatio foreignCurrency(ExplicitRatioForeignCurrency foreignCurrency) {
    
    this.foreignCurrency = foreignCurrency;
    return this;
  }

   /**
   * Get foreignCurrency
   * @return foreignCurrency
  **/
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_FOREIGN_CURRENCY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  @JacksonXmlProperty(localName = "foreign_currency")

  public ExplicitRatioForeignCurrency getForeignCurrency() {
    return foreignCurrency;
  }


  public void setForeignCurrency(ExplicitRatioForeignCurrency foreignCurrency) {
    this.foreignCurrency = foreignCurrency;
  }


  public ExplicitRatio rate(Double rate) {
    
    this.rate = rate;
    return this;
  }

   /**
   * Rate for forgein currency exchange. This field is relevant in POST /almaws/v1/acq/invoices/invoice ID?op&#x3D;paid.
   * @return rate
  **/
  @ApiModelProperty(example = "10", required = true, value = "Rate for forgein currency exchange. This field is relevant in POST /almaws/v1/acq/invoices/invoice ID?op=paid.")
  @JsonProperty(JSON_PROPERTY_RATE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  @JacksonXmlProperty(localName = "rate")

  public Double getRate() {
    return rate;
  }


  public void setRate(Double rate) {
    this.rate = rate;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ExplicitRatio explicitRatio = (ExplicitRatio) o;
    return Objects.equals(this.foreignCurrency, explicitRatio.foreignCurrency) &&
        Objects.equals(this.rate, explicitRatio.rate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(foreignCurrency, rate);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ExplicitRatio {\n");
    sb.append("    foreignCurrency: ").append(toIndentedString(foreignCurrency)).append("\n");
    sb.append("    rate: ").append(toIndentedString(rate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

