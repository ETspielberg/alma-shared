/*
 * Ex Libris APIs
 * For more information on how to use these APIs, including how to create an API key required for authentication, see [Alma REST APIs](https://developers.exlibrisgroup.com/alma/apis).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.unidue.ub.alma.shared.user;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlProperty;
import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlRootElement;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

import javax.xml.bind.annotation.*;
import java.io.Serializable;
import java.util.Objects;

/**
 * Specific user statistic.
 */
@ApiModel(description = "Specific user statistic.")
@JsonPropertyOrder({
  UserStatistic.JSON_PROPERTY_SEGMENT_TYPE,
  UserStatistic.JSON_PROPERTY_STATISTIC_CATEGORY,
  UserStatistic.JSON_PROPERTY_CATEGORY_TYPE,
  UserStatistic.JSON_PROPERTY_STATISTIC_NOTE
})

@XmlRootElement(name = "user_statistic")
@XmlAccessorType(XmlAccessType.FIELD)
@JacksonXmlRootElement(localName = "user_statistic")
public class UserStatistic implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_SEGMENT_TYPE = "segment_type";
  @XmlAttribute(name = "segment_type")
  private String segmentType;

  public static final String JSON_PROPERTY_STATISTIC_CATEGORY = "statistic_category";
  @XmlElement(name = "statistic_category")
  private UserStatisticStatisticCategory statisticCategory;

  public static final String JSON_PROPERTY_CATEGORY_TYPE = "category_type";
  @XmlElement(name = "category_type")
  private UserStatisticCategoryType categoryType;

  public static final String JSON_PROPERTY_STATISTIC_NOTE = "statistic_note";
  @XmlElement(name = "statistic_note")
  private String statisticNote;


  public UserStatistic segmentType(String segmentType) {

    this.segmentType = segmentType;
    return this;
  }

   /**
   * The type of the segment (Internal or External). Relevant only for User API (and not for SIS). For internal users, all the segments are considered internal. External users might have internal or external segments. Empty or illegal segment_type for external user will be considered as external.
   * @return segmentType
  **/
  @ApiModelProperty(example = "External", value = "The type of the segment (Internal or External). Relevant only for User API (and not for SIS). For internal users, all the segments are considered internal. External users might have internal or external segments. Empty or illegal segment_type for external user will be considered as external.")
  @JsonProperty(JSON_PROPERTY_SEGMENT_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  @JacksonXmlProperty(isAttribute = true, localName = "segment_type")

  public String getSegmentType() {
    return segmentType;
  }


  public void setSegmentType(String segmentType) {
    this.segmentType = segmentType;
  }


  public UserStatistic statisticCategory(UserStatisticStatisticCategory statisticCategory) {

    this.statisticCategory = statisticCategory;
    return this;
  }

   /**
   * Get statisticCategory
   * @return statisticCategory
  **/
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_STATISTIC_CATEGORY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  @JacksonXmlProperty(localName = "statistic_category")

  public UserStatisticStatisticCategory getStatisticCategory() {
    return statisticCategory;
  }


  public void setStatisticCategory(UserStatisticStatisticCategory statisticCategory) {
    this.statisticCategory = statisticCategory;
  }


  public UserStatistic categoryType(UserStatisticCategoryType categoryType) {

    this.categoryType = categoryType;
    return this;
  }

   /**
   * Get categoryType
   * @return categoryType
  **/
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_CATEGORY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  @JacksonXmlProperty(localName = "category_type")

  public UserStatisticCategoryType getCategoryType() {
    return categoryType;
  }


  public void setCategoryType(UserStatisticCategoryType categoryType) {
    this.categoryType = categoryType;
  }


  public UserStatistic statisticNote(String statisticNote) {
    
    this.statisticNote = statisticNote;
    return this;
  }

   /**
   * The statistic&#39;s related note.
   * @return statisticNote
  **/
  @ApiModelProperty(value = "The statistic's related note.")
  @JsonProperty(JSON_PROPERTY_STATISTIC_NOTE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  @JacksonXmlProperty(localName = "statistic_note")

  public String getStatisticNote() {
    return statisticNote;
  }


  public void setStatisticNote(String statisticNote) {
    this.statisticNote = statisticNote;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UserStatistic userStatistic = (UserStatistic) o;
    return Objects.equals(this.segmentType, userStatistic.segmentType) &&
        Objects.equals(this.statisticCategory, userStatistic.statisticCategory) &&
        Objects.equals(this.categoryType, userStatistic.categoryType) &&
        Objects.equals(this.statisticNote, userStatistic.statisticNote);
  }

  @Override
  public int hashCode() {
    return Objects.hash(segmentType, statisticCategory, categoryType, statisticNote);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UserStatistic2 {\n");
    sb.append("    segmentType: ").append(toIndentedString(segmentType)).append("\n");
    sb.append("    statisticCategory: ").append(toIndentedString(statisticCategory)).append("\n");
    sb.append("    categoryType: ").append(toIndentedString(categoryType)).append("\n");
    sb.append("    statisticNote: ").append(toIndentedString(statisticNote)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

