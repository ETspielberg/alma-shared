/*
 * Ex Libris APIs
 * For more information on how to use these APIs, including how to create an API key required for authentication, see [Alma REST APIs](https://developers.exlibrisgroup.com/alma/apis).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.unidue.ub.alma.shared.acq;

import java.util.Objects;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.dataformat.xml.annotation.*;
import javax.xml.bind.annotation.*;

/**
 * Specific location Distributions.
 */
@ApiModel(description = "Specific location Distributions.")
@JsonPropertyOrder({
  Location.JSON_PROPERTY_QUANTITY,
  Location.JSON_PROPERTY_LIBRARY,
  Location.JSON_PROPERTY_SHELVING_LOCATION,
  Location.JSON_PROPERTY_HOLDING,
  Location.JSON_PROPERTY_COPY
})

@XmlRootElement(name = "location")
@XmlAccessorType(XmlAccessType.FIELD)
@JacksonXmlRootElement(localName = "location")
public class Location implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_QUANTITY = "quantity";
  @XmlElement(name = "quantity")
  private Integer quantity;

  public static final String JSON_PROPERTY_LIBRARY = "library";
  @XmlElement(name = "library")
  private LocationLibrary library;

  public static final String JSON_PROPERTY_SHELVING_LOCATION = "shelving_location";
  @XmlElement(name = "shelving_location")
  private String shelvingLocation;

  public static final String JSON_PROPERTY_HOLDING = "holding";
  // Is a container wrapped=true
  // items.name=holding items.baseName=holding items.xmlName= items.xmlNamespace=
  // items.example= items.type=Holding
  @XmlElement(name = "holding")
  @XmlElementWrapper(name = "holdings")
  private List<Holding> holding = null;

  public static final String JSON_PROPERTY_COPY = "copy";
  // Is a container wrapped=true
  // items.name=copy items.baseName=copy items.xmlName= items.xmlNamespace=
  // items.example= items.type=Copy2
  @XmlElement(name = "copy")
  @XmlElementWrapper(name = "copies")
  private List<Copy> copy = null;


  public Location quantity(Integer quantity) {
    
    this.quantity = quantity;
    return this;
  }

   /**
   * The quantity per location.
   * @return quantity
  **/
  @ApiModelProperty(example = "1", required = true, value = "The quantity per location.")
  @JsonProperty(JSON_PROPERTY_QUANTITY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  @JacksonXmlProperty(localName = "quantity")

  public Integer getQuantity() {
    return quantity;
  }


  public void setQuantity(Integer quantity) {
    this.quantity = quantity;
  }


  public Location library(LocationLibrary library) {
    
    this.library = library;
    return this;
  }

   /**
   * Get library
   * @return library
  **/

  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_LIBRARY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  @JacksonXmlProperty(localName = "library")

  public LocationLibrary getLibrary() {
    return library;
  }


  public void setLibrary(LocationLibrary library) {
    this.library = library;
  }


  public Location shelvingLocation(String shelvingLocation) {
    
    this.shelvingLocation = shelvingLocation;
    return this;
  }

   /**
   * The location.
   * @return shelvingLocation
  **/

  @ApiModelProperty(example = "main", value = "The location.")
  @JsonProperty(JSON_PROPERTY_SHELVING_LOCATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  @JacksonXmlProperty(localName = "shelving_location")

  public String getShelvingLocation() {
    return shelvingLocation;
  }


  public void setShelvingLocation(String shelvingLocation) {
    this.shelvingLocation = shelvingLocation;
  }


  public Location holding(List<Holding> holding) {
    
    this.holding = holding;
    return this;
  }

  public Location addHoldingItem(Holding holdingItem) {
    if (this.holding == null) {
      this.holding = new ArrayList<Holding>();
    }
    this.holding.add(holdingItem);
    return this;
  }

   /**
   * Relevant holding records. Output parameter.
   * @return holding
  **/

  @ApiModelProperty(value = "Relevant holding records. Output parameter.")
  @JsonProperty(JSON_PROPERTY_HOLDING)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  // items.xmlName=
  @JacksonXmlElementWrapper(useWrapping = true, localName = "holding")

  public List<Holding> getHolding() {
    return holding;
  }


  public void setHolding(List<Holding> holding) {
    this.holding = holding;
  }


  public Location copy(List<Copy> copy) {
    
    this.copy = copy;
    return this;
  }

  public Location addCopyItem(Copy copyItem) {
    if (this.copy == null) {
      this.copy = new ArrayList<Copy>();
    }
    this.copy.add(copyItem);
    return this;
  }

   /**
   * Copies of item in a specific location.
   * @return copy
  **/

  @ApiModelProperty(value = "Copies of item in a specific location.")
  @JsonProperty(JSON_PROPERTY_COPY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  // items.xmlName=
  @JacksonXmlElementWrapper(useWrapping = true, localName = "copy")

  public List<Copy> getCopy() {
    return copy;
  }


  public void setCopy(List<Copy> copy) {
    this.copy = copy;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Location location = (Location) o;
    return Objects.equals(this.quantity, location.quantity) &&
        Objects.equals(this.library, location.library) &&
        Objects.equals(this.shelvingLocation, location.shelvingLocation) &&
        Objects.equals(this.holding, location.holding) &&
        Objects.equals(this.copy, location.copy);
  }

  @Override
  public int hashCode() {
    return Objects.hash(quantity, library, shelvingLocation, holding, copy);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Location2 {\n");
    sb.append("    quantity: ").append(toIndentedString(quantity)).append("\n");
    sb.append("    library: ").append(toIndentedString(library)).append("\n");
    sb.append("    shelvingLocation: ").append(toIndentedString(shelvingLocation)).append("\n");
    sb.append("    holding: ").append(toIndentedString(holding)).append("\n");
    sb.append("    copy: ").append(toIndentedString(copy)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

