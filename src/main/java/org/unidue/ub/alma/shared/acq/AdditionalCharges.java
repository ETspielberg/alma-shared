/*
 * Ex Libris APIs
 * For more information on how to use these APIs, including how to create an API key required for authentication, see [Alma REST APIs](https://developers.exlibrisgroup.com/alma/apis).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.unidue.ub.alma.shared.acq;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.dataformat.xml.annotation.*;
import javax.xml.bind.annotation.*;

/**
 * Additional charges that are included in the invoice.
 */
@ApiModel(description = "Additional charges that are included in the invoice.")
@JsonPropertyOrder({
  AdditionalCharges.JSON_PROPERTY_USE_PRO_RATA,
  AdditionalCharges.JSON_PROPERTY_SHIPMENT,
  AdditionalCharges.JSON_PROPERTY_OVERHEAD,
  AdditionalCharges.JSON_PROPERTY_INSURANCE,
  AdditionalCharges.JSON_PROPERTY_DISCOUNT
})

@XmlRootElement(name = "additional_charges")
@XmlAccessorType(XmlAccessType.FIELD)
@JacksonXmlRootElement(localName = "additional_charges")
public class AdditionalCharges implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_USE_PRO_RATA = "use_pro_rata";
  @XmlElement(name = "use_pro_rata")
  private Boolean useProRata;

  public static final String JSON_PROPERTY_SHIPMENT = "shipment";
  @XmlElement(name = "shipment")
  private Double shipment;

  public static final String JSON_PROPERTY_OVERHEAD = "overhead";
  @XmlElement(name = "overhead")
  private Double overhead;

  public static final String JSON_PROPERTY_INSURANCE = "insurance";
  @XmlElement(name = "insurance")
  private Double insurance;

  public static final String JSON_PROPERTY_DISCOUNT = "discount";
  @XmlElement(name = "discount")
  private Double discount;


  public AdditionalCharges useProRata(Boolean useProRata) {
    
    this.useProRata = useProRata;
    return this;
  }

   /**
   * Indication whether additional charges should be prorate over all invoice lines. Default is according to invoice_use_pro_rata parameter setup.
   * @return useProRata
  **/
  
  @ApiModelProperty(example = "false", value = "Indication whether additional charges should be prorate over all invoice lines. Default is according to invoice_use_pro_rata parameter setup.")
  @JsonProperty(JSON_PROPERTY_USE_PRO_RATA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  @JacksonXmlProperty(localName = "use_pro_rata")

  public Boolean getUseProRata() {
    return useProRata;
  }


  public void setUseProRata(Boolean useProRata) {
    this.useProRata = useProRata;
  }


  public AdditionalCharges shipment(Double shipment) {
    
    this.shipment = shipment;
    return this;
  }

   /**
   * The amount of shipment charge.
   * @return shipment
  **/
  
  @ApiModelProperty(example = "0.00", value = "The amount of shipment charge.")
  @JsonProperty(JSON_PROPERTY_SHIPMENT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  @JacksonXmlProperty(localName = "shipment")

  public Double getShipment() {
    return shipment;
  }


  public void setShipment(Double shipment) {
    this.shipment = shipment;
  }


  public AdditionalCharges overhead(Double overhead) {
    
    this.overhead = overhead;
    return this;
  }

   /**
   * The amount of overhead charge.
   * @return overhead
  **/
  
  @ApiModelProperty(example = "0.00", value = "The amount of overhead charge.")
  @JsonProperty(JSON_PROPERTY_OVERHEAD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  @JacksonXmlProperty(localName = "overhead")

  public Double getOverhead() {
    return overhead;
  }


  public void setOverhead(Double overhead) {
    this.overhead = overhead;
  }


  public AdditionalCharges insurance(Double insurance) {
    
    this.insurance = insurance;
    return this;
  }

   /**
   * The amount of insurance charge.
   * @return insurance
  **/
  
  @ApiModelProperty(example = "0.00", value = "The amount of insurance charge.")
  @JsonProperty(JSON_PROPERTY_INSURANCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  @JacksonXmlProperty(localName = "insurance")

  public Double getInsurance() {
    return insurance;
  }


  public void setInsurance(Double insurance) {
    this.insurance = insurance;
  }


  public AdditionalCharges discount(Double discount) {
    
    this.discount = discount;
    return this;
  }

   /**
   * The amount of discount charge.
   * @return discount
  **/
  
  @ApiModelProperty(example = "0.00", value = "The amount of discount charge.")
  @JsonProperty(JSON_PROPERTY_DISCOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  @JacksonXmlProperty(localName = "discount")

  public Double getDiscount() {
    return discount;
  }


  public void setDiscount(Double discount) {
    this.discount = discount;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AdditionalCharges additionalCharges = (AdditionalCharges) o;
    return Objects.equals(this.useProRata, additionalCharges.useProRata) &&
        Objects.equals(this.shipment, additionalCharges.shipment) &&
        Objects.equals(this.overhead, additionalCharges.overhead) &&
        Objects.equals(this.insurance, additionalCharges.insurance) &&
        Objects.equals(this.discount, additionalCharges.discount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(useProRata, shipment, overhead, insurance, discount);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AdditionalCharges {\n");
    sb.append("    useProRata: ").append(toIndentedString(useProRata)).append("\n");
    sb.append("    shipment: ").append(toIndentedString(shipment)).append("\n");
    sb.append("    overhead: ").append(toIndentedString(overhead)).append("\n");
    sb.append("    insurance: ").append(toIndentedString(insurance)).append("\n");
    sb.append("    discount: ").append(toIndentedString(discount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

