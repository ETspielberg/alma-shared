/*
 * Ex Libris APIs
 * For more information on how to use these APIs, including how to create an API key required for authentication, see [Alma REST APIs](https://developers.exlibrisgroup.com/alma/apis).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.unidue.ub.alma.shared.acq;

import java.util.Objects;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.dataformat.xml.annotation.*;
import javax.xml.bind.annotation.*;

/**
 * Inclusive: the invoice total amount includes VAT. Exclusive: VAT is added above the invoice total amount. Line Exclusive: the invoice&#39;s total amount includes VAT, but the VAT amount is calculated outside of the invoice lines&#39; total value and is not factored into the individual invoice lines. Possible codes are listed in &#39;InvoiceStatus&#39; [code table](https://developers.exlibrisgroup.com/blog/Working-with-the-code-tables-API). Default is &#39;Inclusive&#39;.
 */
@ApiModel(description = "Inclusive: the invoice total amount includes VAT. Exclusive: VAT is added above the invoice total amount. Line Exclusive: the invoice's total amount includes VAT, but the VAT amount is calculated outside of the invoice lines' total value and is not factored into the individual invoice lines. Possible codes are listed in 'InvoiceStatus' [code table](https://developers.exlibrisgroup.com/blog/Working-with-the-code-tables-API). Default is 'Inclusive'.")
@JsonPropertyOrder({
  InvoiceVatType.JSON_PROPERTY_DESC,
  InvoiceVatType.JSON_PROPERTY_VALUE
})

@XmlRootElement(name = "InvoiceVat2Type")
@XmlAccessorType(XmlAccessType.FIELD)
@JacksonXmlRootElement(localName = "InvoiceVat2Type")
public class InvoiceVatType implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_DESC = "desc";
  @XmlAttribute(name = "desc")
  private String desc;

  public static final String JSON_PROPERTY_VALUE = "value";
  @XmlElement(name = "xml_value")
  private String value;


  public InvoiceVatType desc(String desc) {
    
    this.desc = desc;
    return this;
  }

   /**
   * Get desc
   * @return desc
  **/
  
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_DESC)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  @JacksonXmlProperty(isAttribute = true, localName = "desc")

  public String getDesc() {
    return desc;
  }


  public void setDesc(String desc) {
    this.desc = desc;
  }


  public InvoiceVatType value(String value) {
    
    this.value = value;
    return this;
  }

   /**
   * Get value
   * @return value
  **/
  
  @ApiModelProperty(example = "INCLUSIVE", value = "")
  @JsonProperty(JSON_PROPERTY_VALUE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  @JacksonXmlProperty(localName = "xml_value")

  public String getValue() {
    return value;
  }


  public void setValue(String value) {
    this.value = value;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InvoiceVatType invoiceVatType = (InvoiceVatType) o;
    return Objects.equals(this.desc, invoiceVatType.desc) &&
        Objects.equals(this.value, invoiceVatType.value);
  }

  @Override
  public int hashCode() {
    return Objects.hash(desc, value);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InvoiceVat2Type {\n");
    sb.append("    desc: ").append(toIndentedString(desc)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

